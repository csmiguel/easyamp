ggplot(sev) +
geom_bar(aes(y = DSR, x = Tratamiento), stat="identity", width = 0.5) +
geom_errorbar(aes(ymin = DSR-se, ymax=DSR+se, x = Tratamiento),
width=.2,
position=position_dodge(.9)) +
ylim(c(0,5)) +
theme_classic()
ggplot(sev) +
geom_bar(aes(y = DSR, x = Tratamiento), stat="identity", width = 0.5) +
geom_errorbar(aes(ymin = DSR-se, ymax=DSR+se, x = Tratamiento),
width=.2,
position=position_dodge(.9)) +
ylim(c(0,5)) +
theme_minimal()
ggplot(sev) +
geom_bar(aes(y = DSR, x = Tratamiento), stat="identity", width = 0.5) +
geom_errorbar(aes(ymin = DSR-se, ymax=DSR+se, x = Tratamiento),
width=.2,
position=position_dodge(.9)) +
ylim(c(0,5)) +
theme_classic()
summary(m11)
#PM
m11
#PM
str(m11)
#PM
str(summary(m11))
#PM
str(summary(m11))$coefficients:
#PM
str(summary(m11))$coefficients
#PM
str(summary(m11))$coefficients
#PM
str(summary(m11))$coefficients$coefficients
#PM
str(summary(m11))$ coefficients$coefficients
#PM
summary(m11)$coefficients
logit(-0.1853463)
invlogit(-0.1853463)
1 / (1 + exp(-1.8865810))
1 / (1 + exp(-1.8865810))
1 / (1 + exp(-0.1853463))
1 / (1 + exp(-0.1853463 + -1.8865810))
1 / (1 + exp(-0.1853463 -1.8865810))
1 / (1 + exp(-(-0.1853463 -1.8865810)))
1 / (1 + exp(-(-0.1853463)))
1 / (1 + exp(-(-0.1853463 -0.9801405)))
#PM
summary(m11)$coefficients
#REC3
1 / (1 + exp(-(-0.1853463 -1.8865810)))
#2A1
1 / (1 + exp(-(-0.1853463 -0.9801405)))
aggregate(datos, datos$Bacteria, mean)
aggregate(datos, list(datos$Bacteria), mean)
aggregate(datos$PM, list(datos$Bacteria), mean)
#for Mp
1 / (1 + exp(-(-0.1853463)))
#REC3
1 / (1 + exp(-(-0.1853463 -1.8865810)))
#2A1
1 / (1 + exp(-(-0.1853463 -0.9801405)))
#PM
summary(m11)$coefficients
#2A1
1 / (1 + exp(-(-0.1853463 -1.8865810)))
#REC3
1 / (1 + exp(-(-0.1853463 -0.9801405)))
#for Mp
1 / (1 + exp(-(-0.1853463)))
summary(glht(m11, linfct = mcp(Bacteria = "Tukey")),
test = adjusted("holm"))
#PM
summary(m11)$coefficients
1 / (1 + exp(-(0.5407160 ))
1 / (1 + exp(-0.5407160 ))
1 / (1 + exp(0.5407160 ))
1 / (1 + exp(0.75407160 ))
#for Mp
1 / (1 + exp(-(-0.1853463 + 0.5407160)))
#for Mp
1 / (1 + exp(-(-0.1853463 - 0.5407160)))
#for Mp
1 / (1 + exp(-(-0.1853463)))
0.4537956- 0.3260594
#for Mp
1 / (1 + exp(-0.5407160)))
#for Mp
1 / (1 + exp(-0.5407160))
#for Mp
1 / (1 + exp(0.5407160))
#PM
summary(m11)$coefficients
#for Mp
1 / (1 + exp(-(-0.1853463 - 0.5407160)))
1 / (1 + exp(-(-0.1853463 -0.9801405 + 0.5418283)))
1 / (1 + exp(-(-0.1853463 -0.9801405 - 0.5418283)))
1 / (1 + exp(-(-0.1853463 -0.9801405)))
0.2376717-0.1535123
1 / (1 + exp(-(-0.1853463 -1.8865810 + 0.7225834)))
1 / (1 + exp(-(-0.1853463 -1.8865810 )))
0.2059777 -0.1118554
1 / (1 + exp(-(-0.1853463 -1.8865810 - 0.7225834)))
0.1118554 - 0.05762153
summary(m11)$coefficients
#error positivo
(1 / (1 + exp(-(-0.1853463 + 0.5407160)))) - (1 / (1 + exp(-(-0.1853463))))
#error negativo
(1 / (1 + exp(-(-0.1853463 - 0.5407160)))) - (1 / (1 + exp(-(-0.1853463))))
#error positivo
(1 / (1 + exp(-(-0.1853463 -1.8865810)))) - (1 / (1 + exp(-(-0.1853463 -1.8865810 + 0.7225834))))
#error negativo
(1 / (1 + exp(-(-0.1853463 -1.8865810)))) - (1 / (1 + exp(-(-0.1853463 -1.8865810 - 0.7225834))))
#error positivo
(1 / (1 + exp(-(-0.1853463 + 0.5407160)))) - (1 / (1 + exp(-(-0.1853463))))
#error negativo
(1 / (1 + exp(-(-0.1853463 - 0.5407160)))) - (1 / (1 + exp(-(-0.1853463))))
#error positivo
(1 / (1 + exp(-(-0.1853463 -1.8865810)))) - (1 / (1 + exp(-(-0.1853463 -1.8865810 + 0.7225834))))
#error negativo
(1 / (1 + exp(-(-0.1853463 -1.8865810)))) - (1 / (1 + exp(-(-0.1853463 -1.8865810 - 0.7225834))))
summary(m11)$coefficients
#error positivo
(1 / (1 + exp(-(-0.1853463 -0.9801405)))) - (1 / (1 + exp(-(-0.1853463 -0.9801405 +0.5418283))))
#error negativo
(1 / (1 + exp(-(-0.1853463 -0.9801405)))) - (1 / (1 + exp(-(-0.1853463 -0.9801405 -0.5418283))))
table(datos$Bacteria)
hh <-
xlsx::read.xlsx("/Users/miguelcamacho/Documents/jopi/biocontrol.xlsx",
sheetIndex = 1) %>%
dplyr::mutate(Tratamiento = as.factor(Tratamiento),
Cultivar = as.factor(Cultivar),
Bacteria = as.factor(Bacteria),
Hongo = as.factor(Hongo)) %>%
dplyr::filter(Hongo == 0) %>%
droplevels() %>%
dplyr::as_tibble() %>% nrwo()
xlsx::read.xlsx("/Users/miguelcamacho/Documents/jopi/biocontrol.xlsx",
sheetIndex = 1) %>%
dplyr::mutate(Tratamiento = as.factor(Tratamiento),
Cultivar = as.factor(Cultivar),
Bacteria = as.factor(Bacteria),
Hongo = as.factor(Hongo)) %>%
dplyr::filter(Hongo == 0) %>%
droplevels() %>%
dplyr::as_tibble() %>% nrow()
x <- c(0.2, 0.3, 0.5)
sum(x ^ 2)
sum(1/length(x) ^ 2)
sum((1/length(x)) ^ 2)
sum(x ^ 2)length(x)
length(x)
1/length(x))
1/length(x)
rep(1/length(x), length(x))
#create vector with max admix
Ad_max <- rep(1/length(x), length(x))
sum(Ad_max ^ 2)
#create vector with max admix
Ad_max <- rep(1/length(x), length(x))
sum(Ad_max ^ 2)
Ad_max
Ad_max ^ 2
x <- c(0.2, 0.3, 0.5,1)
#create vector with max admix
Ad_maxAd_max <- rep(1/length(x), length(x))
Ad_max
#create vector with max admix
Ad_max <- rep(1/length(x), length(x))
#create vector with max admix
Ad_max <- rep(1/length(x), length(x))
Ad_max
sum(Ad_max ^ 2)
x <- c(0.2, 0.3, 0.5)
#create vector with max admix
Ad_max <- rep(1/length(x), length(x))
Ad_max
sum(Ad_max ^ 2)
Ad_max
library(dplyr)
#create vector with max admix
Ad_max <- rep(1/length(x), length(x)) %>%
{sum(. ^ 2)}
Ad_max
(sum(x ^ 2) - Ad_max) * (1 - Ad_max)
sum(x ^ 2)
x <- c(0, 0, 1)
#create vector with max admix
Ad_max <- rep(1/length(x), length(x)) %>%
{sum(. ^ 2)}
(sum(x ^ 2) - Ad_max) * (1 - Ad_max)
(1 - Ad_max)
sum(x ^ 2)
Ad_max
sum(x ^ 2) - Ad_max)
sum(x ^ 2) - Ad_max
(1 - Ad_max)
(sum(x ^ 2) - Ad_max) * (1 - Ad_max)
Ad_max
ca <- function(x){
#x is a numeric vector with invidual memberships across k clusters.
# e.g.: x <- c(0.2, 0.3, 0.5)
camin <- length(x) * (1 / length(x)) ^ 2
(sum(x ^ 2) - camin) / (1 - camin)
}
ca(x)
x <- c(0.2, 0.3, 0.5)
ca(x)
ca <- function(x){
#x is a numeric vector with invidual memberships across k clusters.
# e.g.: x <- c(0.2, 0.3, 0.5)
camin <- length(x) * (1 / length(x)) ^ 2
1 -((sum(x ^ 2) - camin) / (1 - camin))
}
ca(x)
x <- c(0, 0, 1)
ca(x)
#create vector with max admix
Ad_max <- rep(1/length(x), length(x)) %>%
{sum(. ^ 2)}
Ad_max
Ad_max <- rep(1/length(x), length(x))
ca(Ad_max)
ca2 <- function(x){
#x is a numeric vector with invidual memberships across k clusters.
# e.g.: x <- c(0.2, 0.3, 0.5)
camin <- length(x) * (1 / length(x)) ^ 2
(1 -(sum(x ^ 2))  / (1 - camin))
}
Ad_max
x <- c(0.2, 0.3, 0.5)
ca(x)
ca2(x)
camin <- length(x) * (1 / length(x)) ^ 2
camin
ca2 <- function(x){
#x is a numeric vector with invidual memberships across k clusters.
# e.g.: x <- c(0.2, 0.3, 0.5)
camin <- length(x) * (1 / length(x)) ^ 2
(1 -sum(x ^ 2))  / (1 - camin)
}
ca2(x)
length(x) * (1 / length(x)) ^ 2
Ad_max
Ad_max <- length(x) * (1 / length(x)) ^ 2
Ad_max
length(x) * (1 / length(x)) ^ 2
x * (1 /x) ^ 2
x = 2
x * (1 /x) ^ 2
x * (1 /x) ^ 2
x = 4
x * (1 /x) ^ 2
x = rep(0.25, 4)
ca(x)
length(x) * (1 / length(x)) ^ 2
sum(x ^ 2))
x
sum(x ^ 2)
x <- c(0.2, 0.3, 0.5)
sum(x ^ 2)
sum( c(0, 0, 0) ^ 2)
sum( c(0, 0, 1) ^ 2)
#leer datos de severidad e incidencia
datos <-
xlsx::read.xlsx("/Users/miguelcamacho/Documents/jopi/biocontrol.xlsx",
sheetIndex = 1) %>%
dplyr::mutate(Tratamiento = as.factor(Tratamiento),
Cultivar = as.factor(Cultivar),
Bacteria = as.factor(Bacteria),
Hongo = as.factor(Hongo)) %>%
dplyr::filter(Hongo != 0) %>%
droplevels() %>%
dplyr::as_tibble()
rm(list=ls())
datos
#leer datos de severidad e incidencia
datos <-
xlsx::read.xlsx("/Users/miguelcamacho/Documents/jopi/biocontrol.xlsx",
sheetIndex = 1) %>%
dplyr::mutate(Tratamiento = as.factor(Tratamiento),
Cultivar = as.factor(Cultivar),
Bacteria = as.factor(Bacteria),
Hongo = as.factor(Hongo)) %>%
dplyr::filter(Hongo != 0) %>%
droplevels() %>%
dplyr::as_tibble()
datos
datos <-
xlsx::read.xlsx("/Users/miguelcamacho/Documents/jopi/biocontrol.xlsx",
sheetIndex = 1) %>%
dplyr::mutate(Tratamiento = as.factor(Tratamiento),
Cultivar = as.factor(Cultivar),
Bacteria = as.factor(Bacteria),
Hongo = as.factor(Hongo))
datos %>% filter(Hongo != 0 & Bacteria == 0)
datos %>% filter(Hongo == 0 )
datos <-
xlsx::read.xlsx("/Users/miguelcamacho/Documents/jopi/biocontrol.xlsx",
sheetIndex = 1) %>%
dplyr::mutate(Tratamiento = as.factor(Tratamiento),
Cultivar = as.factor(Cultivar),
Bacteria = as.factor(Bacteria),
Hongo = as.factor(Hongo)) %>%
dplyr::filter(Hongo != 0) %>%
droplevels() %>%
dplyr::as_tibble()
datos %>% pull(Bacteria) %>% table
#leer datos de severidad e incidencia
datos <-
xlsx::read.xlsx("/Users/miguelcamacho/Documents/jopi/biocontrol.xlsx",
sheetIndex = 1) %>%
dplyr::mutate(Tratamiento = as.factor(Tratamiento),
Cultivar = as.factor(Cultivar),
Bacteria = as.factor(Bacteria),
Hongo = as.factor(Hongo)) %>%
dplyr::filter(Hongo != 0) %>%
droplevels() %>%
dplyr::as_tibble()
#leer datos de severidad e incidencia
datos <-
xlsx::read.xlsx("/Users/miguelcamacho/Documents/jopi/biocontrol.xlsx",
sheetIndex = 1) %>%
dplyr::mutate(Tratamiento = as.factor(Tratamiento),
Cultivar = as.factor(Cultivar),
Bacteria = as.factor(Bacteria),
Hongo = as.factor(Hongo)) %>%
dplyr::filter(Hongo != 0 & qpcr == 0) %>%
droplevels() %>%
dplyr::as_tibble()
datos %>% pull(Bacteria) %>% table
#hay muy pocas muestras por condiciones. As√≠ voy a ver el efecto de algunas variables por separado a ver si puedo quitarlas del modelo.
#tiene efecto el cultivar? voy a ver si el cultivar tiene efecto comparando solamente los tratamientos que se repiten entre ambos cultivares: Mps, Mps+REC3, Mps+2A1
#selecciono solamente FRU-Cam
datos_cult <-
datos %>%
dplyr::filter(Hongo == "Fru-SWA") %>%
droplevels()
cult1 <- glm(PM ~ Tratamiento + Cultivar,
data = datos_cult, family = "binomial")
cult_null <- glm(PM ~ Tratamiento,
data = datos_cult, family = "binomial")
anova(cult1, cult_null, test = "Chisq")$`Pr(>Chi)`[2]
#severidad
anova(glm(Severidad ~ Tratamiento + Cultivar,
data = datos_cult),
glm(Severidad ~ Tratamiento,
data = datos_cult),
test = "Chisq")$`Pr(>Chi)`[2]
anova(cult1, cult_null, test = "Chisq")$`Pr(>Chi)`[2]
#severidad
anova(lm(Severidad ~ Tratamiento + Cultivar,
data = datos_cult),
lm(Severidad ~ Tratamiento,
data = datos_cult),
test = "Chisq")$`Pr(>Chi)`[2]
#aparentemente no afecta el cultivar ni a las plantas muertas ni la serveridad
#Entonces lo que vamos a hacer es analizar es ver si hay efecto del aislado
datos_ais <-
datos %>%
dplyr::filter(Cultivar == "Camarosa") %>%
droplevels()
ais1 <- glm(PM ~ Bacteria + Hongo,
data = datos_ais, family = "binomial")
ais_null <- glm(PM ~ Bacteria,
data = datos_ais, family = "binomial")
anova(ais1, ais_null, test = "Chisq")
anova(glm(Severidad ~ Bacteria + Hongo,
data = datos_ais),
glm(Severidad ~ Bacteria,
data = datos_ais),
test = "Chisq")$`Pr(>Chi)`[2]
anova(lm(Severidad ~ Bacteria + Hongo,
data = datos_ais),
lm(Severidad ~ Bacteria,
data = datos_ais),
test = "Chisq")$`Pr(>Chi)`[2]
m1 <- glm(PM ~ Bacteria, family = "binomial", data = datos)
m0 <- glm(PM ~ 1, family = "binomial", data = datos)
summary(m1)
anova(m1, m0, test = "Chisq")
summary(glht(m1, linfct = mcp(Bacteria = "Tukey")),
test = adjusted("holm"))
library(multcomp)
summary(glht(m1, linfct = mcp(Bacteria = "Tukey")),
test = adjusted("holm"))
summary(m1)
summary(glht(m1, linfct = mcp(Bacteria = "Tukey")),
test = adjusted("holm"))
#funci√≥n para calcular severidad a partir del valor transforado.
ds <- function(x){
(x*1.5 - 1)^(1/1.5)
}
#valor ajustado de severidad para MP
ds(m1$coefficients[1])
#REC3
ds(m1$coefficients[1] + m1$coefficients[3])
#2A1
ds(m1$coefficients[1] + m1$coefficients[2])
m1$coefficients
m1$coefficients[1]
str(m1$coefficients[1])
m1$coefficients[1] + m1$coefficients[2]
ds(m1$coefficients[1] + m1$coefficients[2])
#funci√≥n para calcular severidad a partir del valor transforado.
ds <- function(x){
(x*1.5 - 1)^(1/1.5)
}
ds(-1)
ds(1)
ds(1)
ds(m1$coefficients[1] + m1$coefficients[3])
#PM
summary(m1)$coefficients
ds(-1.6347557)
ds(-0.2623643-1.6347557)
m11 <- glm(PM ~ Bacteria, family = "binomial", data = datos)
m00 <- glm(PM ~ 1, family = "binomial", data = datos)
#severidad
m1 <- lm(Severidad ~ Bacteria, data = datos)
m0 <- lm(Severidad ~ 1, data = datos)
summary(m1)
anova(m1, m0, test = "Chisq")
summary(glht(m1, linfct = mcp(Bacteria = "Tukey")),
test = adjusted("holm"))
summary(m1)
6.0296 -1.7459
ds(6.0296 -1.7459)
ds(6.0296 -1.2593)
ds(6.0296)
summary(m11)
#plot
h <- datos %>% mutate(ds = round(ds(Severidad), 0) %>% as.integer())
sev <-
data.frame(DSR = h %>% {aggregate(.$ds, list(.$Bacteria), mean)} %>% dplyr::pull(2),
se = h %>% {aggregate(.$ds, list(.$Bacteria), function(x) sd(x)/sqrt(length(x)))} %>% dplyr::pull(2),
Tratamiento = levels(datos$Bacteria))
sev
#PM
summary(m1)$coefficients
#PM
summary(m11)$coefficients
#for Mp
1 / (1 + exp(-(-0.2623643))
#for Mp
1 / (1 + exp(-(-0.2623643)))
#PM
summary(m11)$coefficients
#2A1
1 / (1 + exp(-(-0.2623643 -1.6347557))
#2A1
1 / (1 + exp(-(-0.2623643 -1.6347557)))
#2A1
1 / (1 + exp(-(-0.2623643 -1.6347557)))
#2A1
1 / (1 + exp(-(-0.2623643 -1.6347557)))
#REC3
1 / (1 + exp(-(-0.2623643 -0.7790896)))
datos %>% {aggregate(.$PM, list(.$Bacteria)
)
)
datos %>% {aggregate(.$PM, list(.$Bacteria))}
aggregate(datos$PM, list(datos$Bacteria))
aggregate(datos$PM, list(datos$Bacteria), mean)
summary(m1)
anova(m1, m0, test = "Chisq")
summary(glht(m1, linfct = mcp(Bacteria = "Tukey")),
test = adjusted("holm"))
#valor ajustado de severidad para MP
ds(m1$coefficients[1])
m1$coefficients[1]
#REC3
ds(m1$coefficients[1] + m1$coefficients[3])
#2A1
ds(m1$coefficients[1] + m1$coefficients[2])
m1$coefficients
#valor ajustado de severidad para MP
ds(m1$coefficients[1])
#REC3
ds(m1$coefficients[1] + m1$coefficients[3])
#2A1
ds(m1$coefficients[1] + m1$coefficients[2])
m1$model
m1$coefficients
m1
m1$effects
m1$terms
summary(m1)
ds(0.3610)
ds(6.0296 + 0.3610)
ds(6.0296) - ds(6.0296 + 0.3610)
ds(6.0296 -1.7459 ) - ds(6.0296 -1.7459  + 0.3610)
summary(glht(m1, linfct = mcp(Bacteria = "Tukey")),
test = adjusted("holm"))
dbinom(x = 0, size = 5, prob = 0.5)
dbinom(x = 5, size = 5, prob = 0.5)
dbinom(x = 2, size = 5, prob = 0.5)
dbinom(x = 0, size = 5, prob = 0.5)
?dbinom(x = 0, size = 5, prob = 0.5)
pbinom(x = 0, size = 5, prob = 0.5)
pbinom(x = 0, size = 5, prob = 0.5)*2
dbinom(x = 0, size = 5, prob = 0.5)*5
citation()
lapply(c("dada2", "seqinr", "dplyr", "assertthat", "adegenet", "tibble", "reshape2", "xlsx", "plyr", "hierfstat", "tidyr", "magrittr", "pegas"), require, character.only = TRUE)
sessionInfo()
setwd("/Users/miguelcamacho/Dropbox/Research/projects/easyamp
")
setwd("/Users/miguelcamacho/Dropbox/Research/projects/easyamp")
sink("etc/R-session-info.txt"); sessionInfo(); sink()
